pub mod advanced_options;
pub mod options;

#[cxx::bridge]
mod ffi {
    #[namespace = "rs::types"]
    enum TableFileCreationReason {
        Flush,
        Compaction,
        Recovery,
        Misc,
    }

    #[namespace = "rs::types"]
    enum BlobFileCreationReason {
        Flush,
        Compaction,
        Recovery,
    }

    /// The types of files RocksDB uses in a DB directory. (Available for
    /// advanced options.)
    #[repr(i32)]
    #[namespace = "rs::types"]
    enum FileType {
        WalFile,
        DBLockFile,
        TableFile,
        DescriptorFile,
        CurrentFile,
        TempFile,
        /// Either the current one, or an old one
        InfoLogFile,
        MetaDatabase,
        IdentityFile,
        OptionsFile,
        BlobFile,
    }

    /// User-oriented representation of internal key types.
    /// Ordering of this enum entries should not change.
    #[namespace = "rs::types"]
    enum EntryType {
        Put,
        Delete,
        SingleDelete,
        Merge,
        RangeDeletion,
        BlobIndex,
        DeleteWithTimestamp,
        WideColumnEntity,
        Other,
    }

    #[namespace = "rs::types"]
    enum WriteStallCause {
        // Beginning of CF-scope write stall causes
        // Always keep `MemtableLimit` as the first stat in this section
        MemtableLimit,
        L0FileCountLimit,
        PendingCompactionBytes,
        CFScopeWriteStallCauseEnumMax,
        // End of CF-scope write stall causes

        // Beginning of DB-scope write stall causes
        //
        // Always keep `WriteBufferManagerLimit` as the first stat in this section
        WriteBufferManagerLimit,
        DBScopeWriteStallCauseEnumMax,
        // End of DB-scope write stall causes

        // Always add new WriteStallCause before `None`
        None,
    }

    #[namespace = "rs::types"]
    enum WriteStallCondition {
        Delayed,
        Stopped,
        // Always add new WriteStallCondition before `Normal`
        Normal,
    }

    // Value types encoded as the last component of internal keys.
    // DO NOT CHANGE THESE ENUM VALUES: they are embedded in the on-disk
    // data structures.
    // The highest bit of the value type needs to be reserved to SST tables
    // for them to do more flexible encoding.
    #[namespace = "rs::db::dbformat"]
    enum ValueType {
        kTypeDeletion = 0x0,
        kTypeValue = 0x1,
        kTypeMerge = 0x2,
        // WAL only.
        kTypeLogData = 0x3,
        // WAL only.
        kTypeColumnFamilyDeletion = 0x4,
        // WAL only.
        kTypeColumnFamilyValue = 0x5,
        // WAL only.
        kTypeColumnFamilyMerge = 0x6,
        kTypeSingleDeletion = 0x7,
        // WAL only.
        kTypeColumnFamilySingleDeletion = 0x8,
        // WAL only.
        kTypeBeginPrepareXID = 0x9,
        // WAL only.
        kTypeEndPrepareXID = 0xA,
        // WAL only.
        kTypeCommitXID = 0xB,
        // WAL only.
        kTypeRollbackXID = 0xC,
        // WAL only.
        kTypeNoop = 0xD,
        // WAL only.
        kTypeColumnFamilyRangeDeletion = 0xE,
        // meta block
        kTypeRangeDeletion = 0xF,
        // Blob DB only
        kTypeColumnFamilyBlobIndex = 0x10,
        // Blob DB only
        // When the prepared record is also persisted in db, we use a different
        // record. This is to ensure that the WAL that is generated by a WritePolicy
        // is not mistakenly read by another, which would result into data
        // inconsistency.
        kTypeBlobIndex = 0x11,
        // WAL only.
        // Similar to ValueType::kTypeBeginPersistedPrepareXID, this is to ensure that WAL
        // generated by WriteUnprepared write policy is not mistakenly read by
        // another.
        kTypeBeginPersistedPrepareXID = 0x12,
        // WAL only.
        kTypeBeginUnprepareXID = 0x13,
        kTypeDeletionWithTimestamp = 0x14,
        // WAL only
        kTypeCommitXIDAndTimestamp = 0x15,
        kTypeWideColumnEntity = 0x16,
        // WAL only
        kTypeColumnFamilyWideColumnEntity = 0x17,
        // Should be after the last valid type, only used for
        // validation
        kTypeMaxValid,
        // Not used for storing records.
        kMaxValue = 0x7F,
    }

    /// The underlying "class/type" of the option. This enum is used to determine how the option
    /// should be converted to/from strings and compared.
    #[namespace = "rs::options_type"]
    enum OptionType {
        Boolean,
        Int,
        Int32T,
        Int64T,
        UInt,
        UInt8T,
        UInt32T,
        UInt64T,
        SizeT,
        String,
        Double,
        CompactionStyle,
        CompactionPri,
        CompressionType,
        CompactionStopStyle,
        ChecksumType,
        EncodingType,
        Env,
        Enum,
        Struct,
        Vector,
        Configurable,
        Customizable,
        EncodedString,
        Temperature,
        Array,
        Unknown,
    }

    #[namespace = "rs::options_type"]
    enum OptionVerificationType {
        Normal,
        /// The option is pointer typed so we can only verify
        /// based on it's name.
        ByName,
        /// Same as kByName, but it also allows the case
        /// where one of them is a nullptr.
        ByNameAllowNull,
        /// Same as kByName, but it also allows the case
        /// where the old option is nullptr.
        ByNameAllowFromNull,
        /// The option is no longer used in rocksdb. The RocksDB
        /// OptionsParser will still accept this option if it
        /// happen to exists in some Options file.  However,
        /// the parser will not include it in serialization
        /// and verification processes.
        Deprecated,
        /// This option represents is a name/shortcut for
        /// another option and should not be written or verified
        /// independently
        Alias,
    }

    /// A set of modifier flags used to alter how an option is evaluated or
    /// processed. These flags can be combined together (e.g. kMutable | kShared).
    /// The kCompare flags can be used to control if/when options are compared.
    /// If kCompareNever is set, two related options would never be compared (always
    /// equal) If kCompareExact is set, the options will only be compared if the
    /// sanity mode
    ///                  is exact
    /// Mutable       means the option can be changed after it is prepared
    /// Shared        means the option is contained in a std::shared_ptr
    /// Unique        means the option is contained in a std::uniqued_ptr
    /// RawPointer    means the option is a raw pointer value.
    /// AllowNull     means that an option is allowed to be null for verification
    ///               purposes.
    /// DontSerialize means this option should not be serialized and included in
    ///               the string representation.
    /// DontPrepare   means do not call PrepareOptions for this pointer value.
    #[namespace = "rs::options_type"]
    enum OptionTypeFlags {
        /// No flags
        None = 0x00,
        CompareDefault = 0x0,
        // this should be SanityLevel::None
        CompareNever = 0x01,
        // this should be SanityLevel::LooselyCompatible
        CompareLoose = 0x02,
        // this should be SanityLevel::ExactMatch
        CompareExact = 0xFF,

        /// Option is mutable
        Mutable = 0x0100,
        /// The option is stored as a raw pointer
        RawPointer = 0x0200,
        /// The option is stored as a shared_ptr
        Shared = 0x0400,
        /// The option is stored as a unique_ptr
        Unique = 0x0800,
        /// The option can be null
        AllowNull = 0x1000,
        /// Don't serialize the option
        DontSerialize = 0x2000,
        /// Don't prepare or sanitize this option
        DontPrepare = 0x4000,
        /// The option serializes to a name only
        StringNameOnly = 0x8000,
    }

    /// This enum defines the RocksDB options sanity level.
    #[namespace = "rs::convenience"]
    enum SanityLevel {
        /// Performs no sanity check at all.
        None = 0x01,
        /// Performs minimum check to ensure the RocksDB instance can be
        /// opened without corrupting / mis-interpreting the data.
        LooselyCompatible = 0x02,
        /// Perform exact match sanity check.
        ExactMatch = 0xFF,
    }

    #[namespace = "rs::convenience"]
    enum Depth {
        /// Traverse nested options that are not flagged as "shallow"
        Default,
        /// Do not traverse into any nested options
        Shallow,
        /// Traverse nested options, overriding the options shallow setting
        Detailed,
    }
}
