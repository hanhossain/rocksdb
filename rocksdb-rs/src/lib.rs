pub mod advanced_options;
pub mod convenience;
pub mod options;
pub mod options_type;

#[cxx::bridge]
mod ffi {
    #[namespace = "rs::types"]
    enum TableFileCreationReason {
        Flush,
        Compaction,
        Recovery,
        Misc,
    }

    #[namespace = "rs::types"]
    enum BlobFileCreationReason {
        Flush,
        Compaction,
        Recovery,
    }

    /// The types of files RocksDB uses in a DB directory. (Available for
    /// advanced options.)
    #[repr(i32)]
    #[namespace = "rs::types"]
    enum FileType {
        WalFile,
        DBLockFile,
        TableFile,
        DescriptorFile,
        CurrentFile,
        TempFile,
        /// Either the current one, or an old one
        InfoLogFile,
        MetaDatabase,
        IdentityFile,
        OptionsFile,
        BlobFile,
    }

    /// User-oriented representation of internal key types.
    /// Ordering of this enum entries should not change.
    #[namespace = "rs::types"]
    enum EntryType {
        Put,
        Delete,
        SingleDelete,
        Merge,
        RangeDeletion,
        BlobIndex,
        DeleteWithTimestamp,
        WideColumnEntity,
        Other,
    }

    #[namespace = "rs::types"]
    enum WriteStallCause {
        // Beginning of CF-scope write stall causes
        // Always keep `MemtableLimit` as the first stat in this section
        MemtableLimit,
        L0FileCountLimit,
        PendingCompactionBytes,
        CFScopeWriteStallCauseEnumMax,
        // End of CF-scope write stall causes

        // Beginning of DB-scope write stall causes
        //
        // Always keep `WriteBufferManagerLimit` as the first stat in this section
        WriteBufferManagerLimit,
        DBScopeWriteStallCauseEnumMax,
        // End of DB-scope write stall causes

        // Always add new WriteStallCause before `None`
        None,
    }

    #[namespace = "rs::types"]
    enum WriteStallCondition {
        Delayed,
        Stopped,
        // Always add new WriteStallCondition before `Normal`
        Normal,
    }

    // Value types encoded as the last component of internal keys.
    // DO NOT CHANGE THESE ENUM VALUES: they are embedded in the on-disk
    // data structures.
    // The highest bit of the value type needs to be reserved to SST tables
    // for them to do more flexible encoding.
    #[namespace = "rs::db::dbformat"]
    enum ValueType {
        kTypeDeletion = 0x0,
        kTypeValue = 0x1,
        kTypeMerge = 0x2,
        // WAL only.
        kTypeLogData = 0x3,
        // WAL only.
        kTypeColumnFamilyDeletion = 0x4,
        // WAL only.
        kTypeColumnFamilyValue = 0x5,
        // WAL only.
        kTypeColumnFamilyMerge = 0x6,
        kTypeSingleDeletion = 0x7,
        // WAL only.
        kTypeColumnFamilySingleDeletion = 0x8,
        // WAL only.
        kTypeBeginPrepareXID = 0x9,
        // WAL only.
        kTypeEndPrepareXID = 0xA,
        // WAL only.
        kTypeCommitXID = 0xB,
        // WAL only.
        kTypeRollbackXID = 0xC,
        // WAL only.
        kTypeNoop = 0xD,
        // WAL only.
        kTypeColumnFamilyRangeDeletion = 0xE,
        // meta block
        kTypeRangeDeletion = 0xF,
        // Blob DB only
        kTypeColumnFamilyBlobIndex = 0x10,
        // Blob DB only
        // When the prepared record is also persisted in db, we use a different
        // record. This is to ensure that the WAL that is generated by a WritePolicy
        // is not mistakenly read by another, which would result into data
        // inconsistency.
        kTypeBlobIndex = 0x11,
        // WAL only.
        // Similar to ValueType::kTypeBeginPersistedPrepareXID, this is to ensure that WAL
        // generated by WriteUnprepared write policy is not mistakenly read by
        // another.
        kTypeBeginPersistedPrepareXID = 0x12,
        // WAL only.
        kTypeBeginUnprepareXID = 0x13,
        kTypeDeletionWithTimestamp = 0x14,
        // WAL only
        kTypeCommitXIDAndTimestamp = 0x15,
        kTypeWideColumnEntity = 0x16,
        // WAL only
        kTypeColumnFamilyWideColumnEntity = 0x17,
        // Should be after the last valid type, only used for
        // validation
        kTypeMaxValid,
        // Not used for storing records.
        kMaxValue = 0x7F,
    }
}

pub fn hello_world() {
    println!("Hello from rust!");
}
