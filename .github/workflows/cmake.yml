name: CMake

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Debug

jobs:
  basic-tests:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: macos-latest

    steps:
    - name: Check disk space (before cleaning)
      run: df -h

    - name: Free disk space
      run: |
        sudo docker rmi $(docker image ls -aq) || true
        sudo rm -rf /usr/share/dotnet
        sudo rm -rf /usr/local/lib/android

    - name: Check disk space (after cleaning)
      run: df -h

    - uses: actions/checkout@v3
    
    - name: Setup dependencies
      run: brew install gflags ninja
      
    - name: Create build directory
      run: mkdir -p ${{github.workspace}}/rocksdb-cxx/build

    - name: Configure CMake
      working-directory: ${{github.workspace}}/rocksdb-cxx/build
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -GNinja -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DWITH_ALL_TESTS=OFF ..

    - name: Build
      working-directory: ${{github.workspace}}/rocksdb-cxx/build
      # Build your program with the given configuration
      run: ninja

    - name: Test
      working-directory: ${{github.workspace}}/rocksdb-cxx/build
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{env.BUILD_TYPE}}

  tests:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: macos-latest

    steps:
    - name: Check disk space (before cleaning)
      run: df -h

    - name: Free disk space
      run: |
        sudo docker rmi $(docker image ls -aq) || true
        sudo rm -rf /usr/share/dotnet
        sudo rm -rf /usr/local/lib/android

    - name: Check disk space (after cleaning)
      run: df -h

    - uses: actions/checkout@v3

    - name: Setup dependencies
      run: brew install gflags ninja

    - name: Create build directory
      run: mkdir -p ${{github.workspace}}/rocksdb-cxx/build

    - name: Configure CMake
      working-directory: ${{github.workspace}}/rocksdb-cxx/build
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -GNinja -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DWITH_ALL_TESTS=ON ..

    - name: Build
      working-directory: ${{github.workspace}}/rocksdb-cxx/build
      # Build your program with the given configuration
      run: ninja

    - name: Test
      working-directory: ${{github.workspace}}/rocksdb-cxx/build
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{env.BUILD_TYPE}}
